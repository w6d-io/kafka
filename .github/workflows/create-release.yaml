name: Create release

on:
  pull_request:
    branches: [ main ]
    types:
      - closed

permissions:
  contents: write
  packages: write
  security-events: write
  pull-requests: read
  pages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - uses: actions/checkout@v4

    - name: Build variables
      id: build_env
      run: |
        echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
        echo "PROJECT_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" >> $GITHUB_ENV
        echo "VCS_REF=$GITHUB_SHA" >> $GITHUB_ENV

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Generate tag
      id: generate_tag
      uses: K-Phoen/semver-release-action@master
      with:
        release_branch: main
        release_strategy: none
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=${{ steps.generate_tag.outputs.tag }}
          type=raw,value=latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        build-args: |
          VERSION=${{ steps.generate_tag.outputs.tag }}
          VCS_REF=${{ env.VCS_REF }}
          BUILD_DATE=${{ env.BUILD_DATE }}
          PROJECT_URL=${{ env.PROJECT_URL }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  chart-release:
    runs-on: ubuntu-latest
    needs: [ build, security-scan ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Add chart dependencies
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add jetstack https://charts.jetstack.io

      - name: Sync CRDs and update chart
        run: |
          make chart-sync-crds
          make chart-update-version CHART_VERSION=${{ needs.build.outputs.version }}

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          config: .github/cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  release-drafter:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    steps:
    - uses: release-drafter/release-drafter@v6
      with:
        config-name: release-drafter.yml
        disable-autolabeler: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  semver-release:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Semver Release
      uses: K-Phoen/semver-release-action@master
      with:
        release_branch: main
        release_strategy: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}